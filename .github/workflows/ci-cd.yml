name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
    tags: [ 'v*' ]
    paths-ignore:
      - '**/*.md'
      - '**/*.png'
      - '**/*.jpg'
      - '**/*.jpeg'
      - '**/*.gif'
      - '**/*.svg'
  pull_request:
    branches: [ main, develop, master ]
  release:
    types: [ published ]
  schedule:
    # Daily health check at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'debug'
        type: choice
        options:
        - debug
        - release
        - both
      run_tests:
        description: 'Run tests'
        required: true
        default: true
        type: boolean

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=false
  ANDROID_COMPILE_SDK: "34"
  ANDROID_BUILD_TOOLS: "34.0.0"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ====================================
  # Validate Gradle Wrapper
  # ====================================
  validate-wrapper:
    name: 🔐 Validate Gradle Wrapper
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🔒 Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v2

  # ====================================
  # Code Quality & Security Checks
  # ====================================
  quality-checks:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    needs: validate-wrapper
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🐘 Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🔧 Configure Android SDK
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}"

      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew

      - name: 🧹 Kotlin Lint Check
        run: ./gradlew ktlintCheck --continue || true
        continue-on-error: true

      - name: 🔍 Static Code Analysis (Detekt)
        run: ./gradlew detekt --continue || true
        continue-on-error: true

      - name: 🐛 Android Lint
        run: ./gradlew lintDebug --continue || true
        continue-on-error: true

      - name: 📊 Upload Quality Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports-${{ github.run_number }}
          path: |
            app/build/reports/
          retention-days: 30

  # ====================================
  # Security Scanning
  # ====================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate-wrapper
    timeout-minutes: 20
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔒 Dependency Vulnerability Scan
        uses: dependency-check/Dependency-Check_Action@main
        id: depcheck
        with:
          project: 'clipboard-history-android'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7
        continue-on-error: true

      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            reports/
          retention-days: 30

  # ====================================
  # Unit & Integration Tests
  # ====================================
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: [validate-wrapper, quality-checks]
    timeout-minutes: 30
    if: github.event.inputs.run_tests != 'false'
    
    strategy:
      matrix:
        api-level: [24, 29, 34]
      fail-fast: false

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🐘 Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🔧 Configure Android SDK
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}"

      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew

      - name: 📊 Print Environment Info
        run: |
          ./gradlew --version | cat
          java -version

      - name: 🏃‍♂️ Run Unit Tests
        run: ./gradlew testDebugUnitTest --stacktrace --continue || true
        continue-on-error: true

      - name: 📊 Generate Test Coverage Report
        run: ./gradlew jacocoTestReport --continue || true
        continue-on-error: true

      - name: 🤖 Run Instrumented Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: ./gradlew connectedDebugAndroidTest --continue
        continue-on-error: true

      - name: 📊 Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-api${{ matrix.api-level }}-${{ github.run_number }}
          path: |
            app/build/reports/tests/
            app/build/reports/jacoco/
            app/build/test-results/
          retention-days: 30

  # ====================================
  # Build APKs
  # ====================================
  build:
    name: 🏗️ Build APKs
    runs-on: ubuntu-latest
    needs: [validate-wrapper, quality-checks]
    timeout-minutes: 20
    
    outputs:
      version-name: ${{ steps.version.outputs.version-name }}
      version-code: ${{ steps.version.outputs.version-code }}

    strategy:
      matrix:
        build_type: [debug, release]
        include:
          - build_type: debug
            build_task: assembleDebug
          - build_type: release
            build_task: assembleRelease

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version calculation

      - name: ☕ Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 🐘 Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: 📱 Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: 🔧 Configure Android SDK
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}"

      - name: 🔧 Make gradlew executable
        run: chmod +x ./gradlew

      - name: 🔢 Calculate Version
        id: version
        run: |
          # Calculate version based on git commits and tags
          VERSION_CODE=$(git rev-list --count HEAD)
          if [[ "${{ github.ref }}" =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION_NAME="${BASH_REMATCH[1]}"
          else
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            VERSION_BASE=${LAST_TAG#v}
            COMMIT_COUNT=$(git rev-list --count ${LAST_TAG}..HEAD 2>/dev/null || echo $VERSION_CODE)
            COMMIT_HASH=$(git rev-parse --short HEAD)
            if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/master" ]; then
              VERSION_NAME="${VERSION_BASE}-${COMMIT_COUNT}-${COMMIT_HASH}"
            else
              BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')
              VERSION_NAME="${VERSION_BASE}-${BRANCH_NAME}-${COMMIT_COUNT}-${COMMIT_HASH}"
            fi
          fi
          
          echo "version-name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version-code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "📱 Version: $VERSION_NAME ($VERSION_CODE)"

      - name: 🔧 Create Keystore for Release
        if: matrix.build_type == 'release'
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore.jks
            echo "Using provided keystore"
          else
            # Create temporary keystore for testing
            keytool -genkey -v -keystore keystore.jks -keyalg RSA -keysize 2048 -validity 10000 \
              -alias key -storepass password -keypass password \
              -dname "CN=Test, OU=Test, O=Test, L=Test, S=Test, C=US"
            echo "Created temporary keystore"
          fi
        env:
          KEYSTORE_PATH: keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'password' }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'key' }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'password' }}

      - name: 🏗️ Build ${{ matrix.build_type }} APK
        run: ./gradlew ${{ matrix.build_task }} --no-daemon --stacktrace
        env:
          VERSION_NAME: ${{ steps.version.outputs.version-name }}
          VERSION_CODE: ${{ steps.version.outputs.version-code }}
          KEYSTORE_PATH: keystore.jks
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD || 'password' }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS || 'key' }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD || 'password' }}

      - name: 📦 Upload ${{ matrix.build_type }} APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_type }}-apk-${{ steps.version.outputs.version-name }}
          path: app/build/outputs/apk/${{ matrix.build_type }}/app-${{ matrix.build_type }}.apk
          if-no-files-found: warn
          retention-days: ${{ matrix.build_type == 'release' && 365 || 90 }}

  # ====================================
  # Deploy & Release
  # ====================================
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📥 Download APK Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-apk-${{ needs.build.outputs.version-name }}"
          path: ./artifacts
          merge-multiple: true

      - name: 📝 Generate Release Notes
        id: release_notes
        run: |
          {
            echo "notes<<EOF"
            echo "## 📱 Clipboard History v${{ needs.build.outputs.version-name }}"
            echo ""
            echo "### 🎯 Changes in this release"
            echo "- Automated build from commit ${{ github.sha }}"
            echo "- Version code: ${{ needs.build.outputs.version-code }}"
            echo ""
            echo "### 📥 Downloads"
            echo "- **Debug APK**: For testing and development"
            echo "- **Release APK**: Optimized for production use"
            echo ""
            echo "### 🔧 Installation"
            echo "1. Download the APK file"
            echo "2. Enable 'Install from unknown sources' on your Android device"
            echo "3. Install the APK file"
            echo "4. Grant necessary permissions for clipboard access"
            echo ""
            echo "### 🛡️ Security"
            echo "All APKs are built using automated CI/CD pipeline with security scanning."
            echo "Release APKs are signed with our official signing key."
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: 🏷️ Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', needs.build.outputs.version-name) }}
          name: 🎉 Release v${{ needs.build.outputs.version-name }}
          body: ${{ steps.release_notes.outputs.notes }}
          files: ./artifacts/*.apk
          draft: false
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ====================================
  # Build Health Monitoring
  # ====================================
  monitor:
    name: 📊 Build Health Monitor
    runs-on: ubuntu-latest
    needs: [quality-checks, test, build]
    if: always() && github.event_name == 'schedule'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📊 Generate Build Health Report
        run: |
          {
            echo "# Build Health Report"
            echo ""
            echo "**Generated:** $(date -u)"
            echo "**Repository:** ${{ github.repository }}"
            echo ""
            echo "## Recent Build Status"
            echo "- **Quality Checks:** ${{ needs.quality-checks.result }}"
            echo "- **Tests:** ${{ needs.test.result }}"
            echo "- **Build:** ${{ needs.build.result }}"
            echo ""
            echo "## Recommendations"
            if [ "${{ needs.quality-checks.result }}" != "success" ]; then
              echo "- ⚠️ Quality checks failed. Review code quality issues."
            fi
            if [ "${{ needs.test.result }}" != "success" ]; then
              echo "- ⚠️ Tests failed or were skipped. Ensure test coverage."
            fi
            if [ "${{ needs.build.result }}" != "success" ]; then
              echo "- 🚨 Build failed. Check build logs immediately."
            fi
            echo "- ✅ Build monitoring is active and functioning."
          } > build-health.md

      - name: 📤 Upload Build Health Report
        uses: actions/upload-artifact@v4
        with:
          name: build-health-report-${{ github.run_number }}
          path: build-health.md
          retention-days: 30

  # ====================================
  # Notification & Summary
  # ====================================
  notify:
    name: 📢 Build Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, test, build, release]
    if: always()
    
    steps:
      - name: 📊 Build Summary
        run: |
          {
            echo "## 🏗️ Build Summary"
            echo "- **Version**: ${{ needs.build.outputs.version-name || 'N/A' }}"
            echo "- **Version Code**: ${{ needs.build.outputs.version-code || 'N/A' }}"
            echo "- **Quality Checks**: ${{ needs.quality-checks.result }}"
            echo "- **Tests**: ${{ needs.test.result || 'Skipped' }}"
            echo "- **Build**: ${{ needs.build.result }}"
            echo "- **Release**: ${{ needs.release.result || 'Skipped' }}"
            echo "- **Commit**: ${{ github.sha }}"
            echo "- **Branch**: ${{ github.ref_name }}"
          } >> $GITHUB_STEP_SUMMARY
