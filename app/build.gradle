plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version '0.50.0'
}

android {
    namespace 'com.clipboardhistory'
    compileSdk 34

    // Determine if a release keystore is available
    def keystorePath = System.getenv("KEYSTORE_PATH") ?: "keystore.jks"
    def hasKeystore = file(keystorePath).exists()

    defaultConfig {
        applicationId "com.clipboardhistory"
        minSdk 24
        targetSdk 34
        
        // Dynamic versioning based on Git
        versionCode getVersionCode()
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        
        // Build config fields
        buildConfigField "String", "BUILD_TIME", "\"${getBuildTime()}\""
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        buildConfigField "String", "GIT_BRANCH", "\"${getGitBranch()}\""
    }

    // Define signing configs only if keystore exists
    if (hasKeystore) {
        signingConfigs {
            release {
                storeFile file(keystorePath)
                storePassword System.getenv("KEYSTORE_PASSWORD") ?: "password"
                keyAlias System.getenv("KEY_ALIAS") ?: "key"
                keyPassword System.getenv("KEY_PASSWORD") ?: "password"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (hasKeystore) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

kapt {
    correctErrorTypes = true
    includeCompileClasspath = true
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation platform('androidx.compose:compose-bom:2024.04.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.2.1'
        implementation 'com.google.android.material:material:1.12.0'
        implementation 'androidx.compose.material:material-icons-extended'
    
    // Architecture Components
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.7.0'
    implementation 'androidx.navigation:navigation-compose:2.7.6'
    
    // Room Database
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'
    kapt 'androidx.room:room-compiler:2.6.1'
    
    // SQLCipher for encryption
    implementation 'net.zetetic:android-database-sqlcipher:4.5.4'
    implementation 'androidx.sqlite:sqlite:2.4.0'
    
    // Dependency Injection
    implementation 'com.google.dagger:hilt-android:2.48.1'
    kapt 'com.google.dagger:hilt-compiler:2.48.1'
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    
    // Security
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    
    // Permissions
    implementation 'com.google.accompanist:accompanist-permissions:0.32.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.12.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test:1.9.22'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.9.22'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
    testImplementation 'androidx.room:room-testing:2.6.1'
    
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.48.1'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.48.1'
    
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

// Versioning functions
def getVersionCode() {
    def versionCode = System.getenv("VERSION_CODE") as Integer
    if (versionCode != null) {
        return versionCode
    }
    
    // Try to get from git commit count
    try {
        def gitCommitCount = "git rev-list --count HEAD".execute().text.trim()
        return gitCommitCount as Integer
    } catch (Exception e) {
        return 1
    }
}

def getVersionName() {
    def versionName = System.getenv("VERSION_NAME")
    if (versionName != null) {
        return versionName
    }
    
    // Try to get from git tag
    try {
        def gitTag = "git describe --tags --abbrev=0".execute().text.trim()
        if (gitTag && !gitTag.isEmpty()) {
            return gitTag.replaceFirst("^v", "")
        }
    } catch (Exception e) {
        // Fallback to default
    }
    
    return "1.0.0"
}

def getBuildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))
}

def getGitHash() {
    try {
        return "git rev-parse --short HEAD".execute().text.trim()
    } catch (Exception e) {
        return "unknown"
    }
}

def getGitBranch() {
    try {
        return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
    } catch (Exception e) {
        return "unknown"
    }
}

// Test coverage configuration
jacoco {
    toolVersion = "0.8.8"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.required = true
        html.required = true
    }
    
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/di/**',
        '**/hilt/**'
    ]
    
    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
    
    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

// Dependency update task
task dependencyUpdates {
    doLast {
        println "Run './gradlew dependencyUpdates' to check for dependency updates"
    }
}