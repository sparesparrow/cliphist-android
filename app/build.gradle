plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-parcelize'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'io.gitlab.arturbosch.detekt'
    id 'jacoco'
}

android {
    namespace 'com.clipboardhistory'
    compileSdk 34

    // Determine if a release keystore is available
    def keystorePath = System.getenv("KEYSTORE_PATH") ?: "keystore.jks"
    def hasKeystore = file(keystorePath).exists()

    defaultConfig {
        applicationId "com.clipboardhistory"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    // Define signing configs only if keystore exists
    if (hasKeystore) {
        signingConfigs {
            release {
                storeFile file(keystorePath)
                storePassword System.getenv("KEYSTORE_PASSWORD") ?: "password"
                keyAlias System.getenv("KEY_ALIAS") ?: "key"
                keyPassword System.getenv("KEY_PASSWORD") ?: "password"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (hasKeystore) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.8'
    }
    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true
        animationsDisabled = true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    
    // Enable test coverage
    buildTypes.debug {
        testCoverageEnabled true
    }
    
    // Lint configuration
    lint {
        checkReleaseBuilds false
        abortOnError false
        ignoreWarnings false
        checkAllWarnings true
        warningsAsErrors false
        disable 'InvalidPackage'
        xmlReport true
        htmlReport true
        textReport false
        xmlOutput file("$project.buildDir/reports/lint/lint-report.xml")
        htmlOutput file("$project.buildDir/reports/lint/lint-report.html")
    }
}

kapt {
    correctErrorTypes = true
    includeCompileClasspath = true
}

dependencies {
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    implementation platform('androidx.compose:compose-bom:2024.04.01')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3:1.2.1'
        implementation 'com.google.android.material:material:1.12.0'
        implementation 'androidx.compose.material:material-icons-extended'
    
    // Architecture Components
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-compose:2.7.0'
    implementation 'androidx.navigation:navigation-compose:2.7.6'
    
    // Room Database
    implementation 'androidx.room:room-runtime:2.6.1'
    implementation 'androidx.room:room-ktx:2.6.1'
    kapt 'androidx.room:room-compiler:2.6.1'
    
    // SQLCipher for encryption
    implementation 'net.zetetic:android-database-sqlcipher:4.5.4'
    implementation 'androidx.sqlite:sqlite:2.4.0'
    
    // Dependency Injection
    implementation 'com.google.dagger:hilt-android:2.48.1'
    kapt 'com.google.dagger:hilt-compiler:2.48.1'
    implementation 'androidx.hilt:hilt-navigation-compose:1.1.0'
    
    // Security
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'
    
    // Permissions
    implementation 'com.google.accompanist:accompanist-permissions:0.32.0'
    
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.12.2'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'org.jetbrains.kotlin:kotlin-test:1.9.22'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.9.22'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
    testImplementation 'androidx.room:room-testing:2.6.1'
    
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'com.google.dagger:hilt-android-testing:2.48.1'
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.48.1'
    
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    
    // Code quality tools
    detektPlugins 'io.gitlab.arturbosch.detekt:detekt-formatting:1.23.4'
    detektPlugins 'io.gitlab.arturbosch.detekt:detekt-rules-libraries:1.23.4'
}

// ====================================
// Code Quality Configuration
// ====================================

// KtLint Configuration
ktlint {
    version = "0.50.0"
    debug = false
    verbose = true
    android = true
    outputToConsole = true
    outputColorName = "RED"
    ignoreFailures = false
    enableExperimentalRules = true
    disabledRules = ["no-wildcard-imports", "max-line-length"]
    reporters {
        reporter "plain"
        reporter "checkstyle"
        reporter "sarif"
    }
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}

// Detekt Configuration
detekt {
    toolVersion = "1.23.4"
    config = files("$projectDir/detekt.yml")
    buildUponDefaultConfig = true
    allRules = false
    baseline = file("$projectDir/detekt-baseline.xml")
    
    reports {
        html.enabled = true
        xml.enabled = true
        txt.enabled = true
        sarif.enabled = true
        md.enabled = false
    }
}

// Jacoco Test Coverage Configuration
jacoco {
    toolVersion = "0.8.8"
}

tasks.register('testDebugUnitTestCoverage', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the debug build"

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/*$WhenMappings.*',
        '**/*$serializer.*',
        '**/*$$serializer.*',
        '**/*Hilt*.*',
        '**/*_Factory.*',
        '**/*_MembersInjector.*',
        '**/*Module.*',
        '**/*Component.*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
        'jacoco/testDebugUnitTest.exec',
        'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}

// Custom task to run all quality checks
tasks.register('qualityCheck') {
    group = "verification"
    description = "Runs all quality checks: ktlint, detekt, lint, and tests"
    dependsOn 'ktlintCheck', 'detekt', 'lintDebug', 'testDebugUnitTest', 'testDebugUnitTestCoverage'
}